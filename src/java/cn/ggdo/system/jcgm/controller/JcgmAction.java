package cn.ggdo.system.jcgm.controller;import java.io.IOException;import java.sql.Connection;import java.sql.DatabaseMetaData;import java.sql.ResultSet;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.stereotype.Controller;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.ModelAndView;import cn.ggdo.system.framework.spring.SpringBindingResultWrapper;import cn.ggdo.system.framework.spring.annotation.MethodLog;import cn.ggdo.system.function.common.BaseAction;import cn.ggdo.system.function.common.JsonResultBean;import cn.ggdo.system.jcgm.dbToAction.GenerateAction;import cn.ggdo.system.jcgm.dbToEntity.Config;import cn.ggdo.system.jcgm.dbToEntity.GenerateEntity;import cn.ggdo.system.jcgm.dbToJsp.GenerateJsp;import cn.ggdo.system.jcgm.dbToMybatis.GenerateDao;import cn.ggdo.system.jcgm.dbToMybatisXml.GenerateMybatisXml;import cn.ggdo.system.jcgm.dbToService.GenerateService;import cn.ggdo.system.jcgm.dbToServiceImpl.GenerateServiceImpl;import cn.ggdo.system.jcgm.until.DBTable;import cn.ggdo.system.jcgm.until.FileUntil;import cn.ggdo.system.jcgm.until.JDBCUntil;import cn.ggdo.system.jcgm.until.StringUntil;@Controller@RequestMapping("/ggdo")public class JcgmAction extends BaseAction {	public Config config = new Config();	public StringUntil su = new StringUntil();	public FileUntil fu = new FileUntil();		@ResponseBody//根据数据库用户名密码查询表信息	@MethodLog(name = "toListTables", description = "根据数据库用户名密码查询表信息")	@RequestMapping("/toListTables")	public ModelAndView toListTables(ModelAndView model) {		model.setViewName("listTables");		return model;	}		@ResponseBody//根据数据库用户名密码查询表信息    @MethodLog(name = "getListTables", description = "根据数据库用户名密码查询表信息")    @RequestMapping("/getListTables")    public List<DBTable> getListTables() {        List<DBTable> list = new ArrayList<DBTable>();        try {            // 1.创建数据库连接            String driverString = fu.readPropertiesValue("DBDriver");            String url = fu.readPropertiesValue("DBUrl");            String user = fu.readPropertiesValue("DBUser");            String password = fu.readPropertiesValue("DBPass");            Connection conn = new JDBCUntil(driverString, url, user, password).getConnection();            DatabaseMetaData dbmd = conn.getMetaData();            // 2.获取表信息            ResultSet rst = dbmd.getTables(null, null, "%", new String[] { "TABLE" });            while (rst.next()) {                DBTable dbtable = new DBTable();                int start = Integer.parseInt(fu.readPropertiesValue("DBTableSub").trim());                String tableName = rst.getString("TABLE_NAME");                String tableAlias = rst.getString("TABLE_NAME").substring(start);                dbtable.setTableName(tableName);                dbtable.setTableComment(tableAlias);                dbtable.setDbColumnss(null);                list.add(dbtable);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }	/**	 * 查询DB的连接信息	 */	@ResponseBody//查询DB的连接信息	@MethodLog(name = "toDBConfig", description = "查询DB的连接信息")	@RequestMapping(value = "/toDBConfig")	public DBEntity toDBConfig() throws IOException {		DBEntity dbEntity = new DBEntity();		dbEntity.setDbDriver(fu.readPropertiesValue("DBDriver"));		dbEntity.setDbUrl(fu.readPropertiesValue("DBUrl"));		dbEntity.setDbUser(fu.readPropertiesValue("DBUser"));		dbEntity.setDbPass(fu.readPropertiesValue("DBPass"));		dbEntity.setDbTableSub(fu.readPropertiesValue("DBTableSub"));		return dbEntity;	}	/**	 * 查询生成代码的相关信息	 */	@ResponseBody//查询生成代码的相关信息	@MethodLog(name = "toPathConfig", description = "查询生成代码的相关信息")	@RequestMapping(value = "/toPathConfig")	public PathEntity toPathConfig() throws IOException {		PathEntity pathEntity = new PathEntity();		pathEntity.setPathTemplate(fu.readPropertiesValue("PathTemplate"));		pathEntity.setPathProject(fu.readPropertiesValue("PathProject"));		pathEntity.setPathJava(fu.readPropertiesValue("PathJava"));		pathEntity.setPathJsp(fu.readPropertiesValue("PathJsp"));		pathEntity.setPathMainMybatis(fu.readPropertiesValue("PathMainMybatis"));		pathEntity.setPathSpring(fu.readPropertiesValue("PathSpring"));		pathEntity.setPathMybatis(fu.readPropertiesValue("PathMybatis"));		pathEntity.setGenPathHead(fu.readPropertiesValue("GenPathHead"));		pathEntity.setFilePathMenu(fu.readPropertiesValue("FilePathMenu"));		pathEntity.setPathResources(fu.readPropertiesValue("PathResources"));		return pathEntity;	}	/**	 * 修改DB的配置信息	 */	@ResponseBody//查询生成代码的相关信息	@MethodLog(name = "dbConfig", description = "查询生成代码的相关信息")	@RequestMapping(value = "/dbConfig")	public final JsonResultBean dbConfig(@ModelAttribute("dbEntity")			DBEntity dbEntity, BindingResult bindingResult) throws IOException {		try {			Map<String, String> map = new HashMap<String, String>();			map.put("DBDriver", dbEntity.getDbDriver());			map.put("DBUrl", dbEntity.getDbUrl());			map.put("DBUser", dbEntity.getDbUser());			map.put("DBPass", dbEntity.getDbPass());			map.put("DBTableSub", dbEntity.getDbTableSub());			fu.updateProperties(map);			return new JsonResultBean(JsonResultBean.SUCCESS, "配置成功");		} catch (Exception e) {			e.printStackTrace();			return new JsonResultBean(JsonResultBean.FAULT,					SpringBindingResultWrapper.warpErrors(bindingResult));		}	}	/**	 * 修改生成代码的配置信息	 */	@ResponseBody//修改生成代码的配置信息	@MethodLog(name = "pathConfig", description = "修改生成代码的配置信息")	@RequestMapping(value = "/pathConfig")	public final JsonResultBean pathConfig(@ModelAttribute("pathEntity")			PathEntity pathEntity, BindingResult bindingResult) throws IOException {		try {			Map<String, String> map = new HashMap<String, String>();			map.put("PathTemplate", pathEntity.getPathTemplate());			map.put("PathProject", pathEntity.getPathProject());			map.put("PathJava", pathEntity.getPathJava());			map.put("PathJsp", pathEntity.getPathJsp());			map.put("GenPathHead", pathEntity.getGenPathHead());			map.put("PathMainMybatis", pathEntity.getPathMainMybatis());			map.put("PathMybatis", pathEntity.getPathMybatis());			map.put("PathResources", pathEntity.getPathResources());			map.put("FilePathMenu", pathEntity.getFilePathMenu());			fu.updateProperties(map);			return new JsonResultBean(JsonResultBean.SUCCESS, "配置成功");		} catch (Exception e) {			e.printStackTrace();			return new JsonResultBean(JsonResultBean.FAULT,					SpringBindingResultWrapper.warpErrors(bindingResult));		}	}	/**	 * 根据ids生成对应的代码	 */	@ResponseBody//作用是将返回的对象作为响应，发送给页面	@MethodLog(name = "codeGenerate", description = "根据id查询Bean")	@RequestMapping(value = "/codeGenerate")	public JsonResultBean codeGenerate(@RequestParam("ids") String ids) throws IOException {		try {			String[] tempArray = ids.split(",");			int start = Integer.parseInt(fu.readPropertiesValue("DBTableSub").trim());// 截取别名开始位置			for (String string : tempArray) {				Map<String, String> map = new HashMap<String, String>();				map.put("DBTableAlias", string.trim().substring(start));				map.put("DBTable", string.trim());				fu.updateProperties(map);				// 生成bean				new GenerateEntity().generate();				// 生成dao				new GenerateDao().generate();				// 生成mybatisXml				new GenerateMybatisXml().generate();				// 生成service				new GenerateService().generate();				// 生成serviceImpl				new GenerateServiceImpl().generate();				// 生成action				new GenerateAction().generate();				// 生成jsp				new GenerateJsp().generate();			}			return new JsonResultBean(JsonResultBean.SUCCESS, "生成代码成功");		} catch (Exception e) {			e.printStackTrace();			this.errorMsg = "生成代码失败!";			return new JsonResultBean(JsonResultBean.FAULT,"生成代码失败");		}	}}